/*
 * generated by Xtext 2.15.0
 */
package org.xtext.example.mydsl.serializer;

import Trmodel.Add;
import Trmodel.Column;
import Trmodel.Delete;
import Trmodel.LoadModel;
import Trmodel.Table;
import Trmodel.TrmodelPackage;
import Trmodel.Update;
import Trmodel.loader;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TrmodelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TrmodelPackage.ADD:
				sequence_Add(context, (Add) semanticObject); 
				return; 
			case TrmodelPackage.COLUMN:
				sequence_Column(context, (Column) semanticObject); 
				return; 
			case TrmodelPackage.DELETE:
				sequence_Delete(context, (Delete) semanticObject); 
				return; 
			case TrmodelPackage.LOAD_MODEL:
				sequence_LoadModel(context, (LoadModel) semanticObject); 
				return; 
			case TrmodelPackage.TABLE:
				sequence_Table(context, (Table) semanticObject); 
				return; 
			case TrmodelPackage.UPDATE:
				sequence_Update(context, (Update) semanticObject); 
				return; 
			case TrmodelPackage.LOADER:
				sequence_loader(context, (loader) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Operation returns Add
	 *     Add returns Add
	 *
	 * Constraint:
	 *     (table=Table? column=Column?)
	 */
	protected void sequence_Add(ISerializationContext context, Add semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Column returns Column
	 *
	 * Constraint:
	 *     (Name=EString? tableName=EString?)
	 */
	protected void sequence_Column(ISerializationContext context, Column semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns Delete
	 *     Delete returns Delete
	 *
	 * Constraint:
	 *     (table=Table? column=Column?)
	 */
	protected void sequence_Delete(ISerializationContext context, Delete semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LoadModel returns LoadModel
	 *
	 * Constraint:
	 *     url=EString?
	 */
	protected void sequence_LoadModel(ISerializationContext context, LoadModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Table returns Table
	 *
	 * Constraint:
	 *     Name=EString?
	 */
	protected void sequence_Table(ISerializationContext context, Table semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns Update
	 *     Update returns Update
	 *
	 * Constraint:
	 *     (table=Table? column=Column? newName=EString)
	 */
	protected void sequence_Update(ISerializationContext context, Update semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     loader returns loader
	 *
	 * Constraint:
	 *     (loadmodel=LoadModel (operation+=Operation operation+=Operation*)?)
	 */
	protected void sequence_loader(ISerializationContext context, loader semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
